class 클래스():
    변수 = 1
    # def __init__(self):
    #     self.변수 = 1
    # 이런식으로 변수 초기값 설정할 수도 있음, 하지만 간단하게 '변수 = 1'로 작성!


    # 클래스 내부에 있는 변수를 변경하기 위해서는 "self"라는 매개변수를 꼭 사용!
    def 변수변경(self):
        self.변수 = 3   # 변수값 1에서 3으로 변경


"""
모든 사원들은 각자
출근하시면
아침업무로 
배달온 상자안에 물건을 전부 까서
사과는 냉장실에
아이스크림은 냉동실에 넣어 주시고,
나머지는 폐기처분 해주세요.
그리고나서 아침업무 체크를 해주세요!
"""

class 업무():

    아침업무유무 = False     # 아침업무 실행 체크 (초기값 설정)

    def 아침업무체크(self):
        self.아침업무유무 = True    # 초기값 변경   ---- 5

    def 아침업무(self, 상자):                   # self 매개변수는 무시하고 '상자' 매개변수 하나있다고 생각 ---- 3
        for 값1 in 상자:                        # 상자안에 물건 전부 까서
            if 값1 == "사과":                   # 사과면
                print(f"'{값1}' 냉장실에 넣기")  # 냉장실에 넣고
            elif 값1 == "아이스크림":            # 아이스크림이면
                print(f"'{값1}' 냉동실에 넣기")  # 냉동실에 넣고
            else:                               # 아니면
                print(f"'{값1}'은 폐기 처분")    # 페기 처분

        self.아침업무체크()                      # ---- 4

출근 = True                                 # 출근했음  ---- 1

if 출근:                                    # 출근했다면
    상자 = ["사과", "배", "콩", "두부", "아이스크림"]   # 상자에 사과,배,콩,두부,아이스크림이 담겨있다

    mywork_업무 = 업무()                          # class는 바로 호출 못함, 특정변수에 담아서 객체화해서 호출   ---- 2
    print(mywork_업무.아침업무유무)                # 아직 아침업무를 하지 않았기 때문에 False
    
    mywork_업무.아침업무(상자)                     # ---- 3
    print(mywork_업무.아침업무유무)                # 아침업무 함수가 돌아가면 마지막에 아침업무체크를 하기 때문에 True


    베어유_업무 = 업무()                          # 객체 생성
    print(베어유_업무.아침업무유무)                # 위에서 True로 바꼈기 때문에 True라고 생각할 수도 있지만 독립적인 객체로 할당받았기 때문에 False